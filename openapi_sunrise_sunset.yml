openapi: "3.0.0"

info:
  version: "2.14.0"
  title: Trip Ninja API Documentation
  description: |
    # Introduction
    Trip Ninja uses a REST API with requests and responses in JSON format. For development and testing, the pre-production servers
    are to be used. Once ready for live use, access to the production servers will be provided. All search endpoints have both production
    and pre-production endpoints - these correspond to the GDS’s production and pre-production services, and can be used as desired.

    # Trip Ninja API URLs
    Production: http://trip-ninja-api.eu-west-1.elasticbeanstalk.com

    Pre-Production: http://trip-ninja-api-preprod.us-east-2.elasticbeanstalk.com

    For security, Trip Ninja’s servers are only accessible from whitelisted IPs. Please contact your account manager to whitelist IPs you
    will be using.

    Before you start ensure that:
        - IP addresses have been provided to be whitelisted for our servers.
        - PCC / OfficeID emulation via Trip Ninja’s PCC/OfficeID has been set up.
        - API username and password have been provided by Trip Ninja.

    # Workflow
    The following diagram shows the typical data flow of API calls to Trip Ninja for a FareStructure integration with both a partner website
    and metasearch as sources.

    ![Workflow diagram](https://s3.amazonaws.com/tn-api-docs/workflow.png)

    # Authentication
    Trip Ninja uses Basic Authentication standards. Simply encode your username and password string using base64 and pass it in the
    authorization headers. See the python example below on how this is done. In the example, the payload and API endpoint url are not
    shown.

    Python Example:

    <code>
    import base64<br  />
    auth = base64.b64encode("USERNAME:PASSWORD")<br  />
    headers = {<br  />
        'authorization': "Basic "+ auth,<br  />
    }<br  />
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    </code>
  contact:
    name: Trip Ninja
    url: https://www.tripninja.io/contact-us

  x-logo:
    url: 'https://s3.amazonaws.com/tn-api-docs/trip_ninja_logo.png'
    altText: Trip Ninja logo

servers:
  - url: http://trip-ninja-api.eu-west-1.elasticbeanstalk.com
    description: Production server
  - url: http://trip-ninja-api-preprod.us-east-2.elasticbeanstalk.com
    description: Pre-Production server

paths:
  /fare-structure:
    post:
      summary: "FareStructure"
      description: "The FareStructure product returns the set of best GDS responses that create the specified route. It finds the best fare structure via
split ticketing and does not reorder the destinations. Each of the returned segments must be ticketed in its own PNR."
      operationId: FareStructure
      requestBody:
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/FareStructureRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                  allOf:
                      - $ref: '#/components/schemas/FareStructureResponse'


  /flex-trip:
    post:
      summary: "FlexTrip"
      description: "Get the sunset and sunrise information for a given location based on latitude and longitude parameters."
      operationId: FlexTrip
      requestBody:
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/FlexTripRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/FlexTripResponse'


  /booking:
      post:
          summary: "Booking Report"
          description: "When a booking is completed from a trip generated by Trip Ninja, report the booking to Trip Ninja via the booking endpoint."
          operationId: "/booking/"
          requestBody:
              content:
                  application/json:
                      schema:
                          $ref: '#/components/schemas/ReportRequest'
          responses:
            200:
              description: Success
              content:
                application/json:
                  schema:
                      type: object
                      properties:
                          status:
                            type: string
                            example: "booked"

  /pre-booking:
        post:
            summary: "Price Confirmation Report"
            description: "When performing an availability or price confirmation request - when a user has selected their flights or is arriving on the site from
metasearch - please send a request to the following endpoint. This provides valuable data to our revenue management system in
determining markups for trips."
            operationId: "/pre-booking/"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReportRequest'
            responses:
              200:
                description: Success
                content:
                  application/json:
                    schema:
                        type: object
                        properties:
                            status:
                              type: string
                              example: "confirmed"

  /ticketing:
        post:
            summary: "Ticketing Report"
            description: "When performing an availability or price confirmation request - when a user has selected their flights or is arriving on the site from
metasearch - please send a request to the following endpoint. This provides valuable data to our revenue management system in
determining markups for trips."
            operationId: "/ticketing/"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReportRequest'
            responses:
              200:
                description: Success
                content:
                  application/json:
                    schema:
                        type: object
                        properties:
                            status:
                              type: string
                              example: "ticketed"


  /cancel:
        post:
            summary: "Cancel Booking"
            description: "To cancel a booking you have previously booked, report it to the Trip Ninja Service endpoint: “/cancel/”"
            operationId: "/cancel/"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CancelRequest'
            responses:
              200:
                description: Success
                content:
                  application/json:
                    schema:
                        type: object
                        properties:
                            status:
                              type: string
                              example: "Trip has been cancelled."

  /input-errors:
        post:
            summary: "Input Error Codes"
            description: "List of all input error codes that can be returned under ErrorDetails in a FlexTrip or FareStructure request."
            operationId: "input-error-codes"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CancelRequest'
            responses:
              200:
                description: Success
                content:
                  application/json:
                    schema:
                        type: object
                        properties:
                            status:
                              type: string
                              example: "Trip has been cancelled."


components:
  schemas:
    FareStructureResponse:
      title: Response
      type: object

      properties:
        trip:
          type: object
          description: time of sunrise
          example:
            endpoint: Prod
            num_results: 50
            cabin_class: E
            exclude_carriers: []
            region: "americas"
            refundable: false
            currency: USD
            time_value: 0
            max_cache: 24
            travellers: 1
            provider: 1V
            alliance: ""
            alpha: 0.1
            schema: 40
            pcc: 2G3C
        FareStructure:
            type: object
            description: Contains the JSON object of the response. May contain both FlexTrip and FareStructure if hitting the hybrid endpoint, otherwise will contain only either FareStructure or FlexTrip JSON object.
            properties:
                total_cost:
                    type: float
                    description: Total cost of cheapest segments recommended, in currency specified.
                    example: 693.6
                tn_net_fare_markup:
                    type: float
                    description: Markup specified by the Trip Ninja Net Fare to be applied at the itinerary level.
                    example: 0.0
                structure:
                    type: array
                    description: "Array representing the structure of the trip in terms of one-ways and open-jaw segments. For example: [[0, 1], [3, 4], 2] means there would be three segments. One openjaw with key “01”, one with key “34” and a one-way with key ‘2”."
                ErrorDetails:
                    type: string
                    description: Usually an empty string, but will contain a helpful message if something goes wrong!
                path_sequence:
                    type: array
                    description: An array of IATA codes representing the chronological order of your trip.
                trip_id:
                    type: string
                    description: A unique key used for identification and when booking a trip.
                total_transportation_minutes:
                    type: integer
                    description: Total transportation minutes for recommended cheapest segments.
                itineraries_included:
                    type: string
                    oneOf:
                        - $ref: '#/components/schemas/Itineraries'
                        - $ref: '#/components/schemas/Segments'
                    discriminator:
                          propertyName: itineraries_included
                          mapping:
                            itineraries: '#/components/schemas/Itineraries'
                            segments: '#/components/schemas/Segments'


        status:
          type: string
          description: "Four possible statuses:\n
            \n* `OK`: No errors occurred.
            \n* `INVALID_REQUEST`: Either lat or lng parameters are missing or invalid.
            \n* `INVALID_DATE`: The date parameter is missing or invalid;
            \n* `UNKNOWN_ERROR`: The request could not be processed due to a server error. The request may succeed if you try again."
          example: "OK"
    Itineraries:
        allOf:
          - $ref: '#/components/schemas/FareStructureResponse/properties/FareStructure/properties'
          - type: object
            description: Array of itineraries sorted by weight.
            properties:
                weight:
                    type: float
                    description: Weight of the segment (time-value considered).
                    example: 239
                price:
                    type: float
                    description: Price of the segment (fare and tax included).
                    example: 197.1
                base_price:
                    type: float
                    description: Base price of the segment (tax excluded)
                    example: 0
                taxes:
                    type: float
                    description: Tax price of the segment
                    example: 119.1
                fees:
                    type: float
                    description: Fees for the segment *Travelport customers only*
                    example: 0
                cabin_class:
                    type: string
                    description: Cabin class for the entire segment *Travelport customers only*
                    example: Economy
                latest_ticketing_date:
                    type: date
                    description: Latest ticketing time
                    example: "2019-05-07"
                refundable:
                    type: boolean
                    description: Refundable tickets
                    example: false
                e_ticketability:
                    type: boolean
                    example: true
                transp_time:
                    type: integer
                    description: Total transportation time for the itinerary
                    example: 425
                segments:
                    type: array
                    description: List of segments in the itinerary
                    items:
                        type: object
                        properties:
                            segment_origin_full:
                                type: string
                                description: "Origin of the segment."
                                example: "London, United Kingdom (LHR)"
                            segment_destination_full:
                                type: string
                                description: "Destination of the segment."
                                example: "Berlin, Germany (TXL)"
                            weight:
                                type: string
                                description: Weight of the segment (time-value considered).
                                example: 96
                            segment_id:
                                type: string
                                description: String if one-way, Array of 2 Strings if open-jaw. Used for booking.
                                example: "344d73be0d61f820aa9a6ace300742fed0672f2e"
                            price:
                                type: float
                                description: Price of the segment (fare and tax included)
                                example: 72.3
                            segment_source:
                                type: string
                                description: GDS or LCC provider source for segment. Only shown with ‘include_lcc’ request parameter enabled.
                                example: travelport
                            cancel_penalty:
                                type: object
                                description: Information about cancellation
                                properties:
                                    amount:
                                        type: float
                                        description: Cancellation penalty amount
                                        example: 0
                                    percentage:
                                        type: float
                                        description: Cancellation penalty percentage
                                        example: 100
                            change_penalty:
                                type: object
                                description: Information about changing.
                                properties:
                                    amount:
                                        type: float
                                        description: Cancellation penalty amount
                                        example: 78
                                    percentage:
                                        type: float
                                        description: Cancellation penalty percentage
                                        example: 0
                            flight_type:
                                type: string
                                description: “open_jaw” or “one_way”
                                example: "open_jaw"
                            legs:
                                type: array
                                description: A list of legs, each leg includes origin, destination, flight number, departure time and arrival time. Contains same objects as leg_details below.
    Segments:
        allOf:
          - $ref: '#/components/schemas/FareStructureResponse/properties/FareStructure/properties'
          - type: object
            description: JSON object of segments sorted by weight. Get the [0] index of each segment list for the recommended segment. The key can represent a one-way or an open-jaw segment. One-ways are represented like “0”,”1”,”2”,”3”,”4”, etc, representing the index of the flight in the trip chronologically. Open-jaws are represented in pairs like “01”, “04”, “23”, etc where ‘Group0’ will go in the first part and ‘Group1’ in the second. For example, “23” - ‘Group0’ would go at index 2 and ‘Group1’ at index 3 chronologically.
            properties:
                additional_details:
                    type: object
                    description: Additional details *in development for Travelport customers*
                baggage:
                    type: object
                    description: Contains baggage information *Travelport customers only*
                    properties:
                        number_of_pieces:
                            type: integer
                            description: Number of bags allowed.
                            example: 0
                weight:
                    type: float
                    description: Weight of the segment (time-value considered).
                    example: 96.9
                price:
                    type: float
                    description: Price of the segment (fare and tax included).
                    example: 89.4
                base_price:
                    type: float
                    description: Base price of the segment (tax excluded)
                    example: 55.0
                taxes:
                    type: float
                    description: Tax price of the segment
                    example: 34.4
                fees:
                    type: float
                    description: Fees for the segment *Travelport customers only*
                    example: 0
                cabin_class:
                    type: string
                    description: Cabin class for the entire segment *Travelport customers only*
                    example: Economy
                private_fare:
                    type: boolean
                    description: True if segment is a private fare, otherwise False *Travelport customers only*
                    example: false
                segment_id:
                    type: string
                    description: String if one-way, Array of 2 Strings if open-jaw. Used for booking.
                    example: "b546cdcc82c872b7a5b1e54cc69a7b28ac6aeee2"
                transp_time:
                    type: float
                    description: Transportation time for the segment
                    example: 75
                segment_source:
                    type: string
                    description: GDS or LCC provider source for segment. Only shown with ‘include_lcc’ request parameter enabled.
                Group0:
                    type: object
                    description: One-way segment or first part of open-jaw segment
                    properties:
                        segment_origin_full:
                            type: string
                            description: "Origin of the segment."
                            example: "London, United Kingdom"
                        segment_destination_full:
                            type: string
                            description: "Destination of the segment."
                            example: "Paris, France"
                        key:
                            type: string
                            description: Segment_id for the group
                            example: "14c9e2e5c95a5bf0f9f7712de24348e6aba88c32"
                        segment_details:
                            type: object
                            description: Contains information about the segment legs, and total travel time
                            properties:
                                segment_time_w_connections:
                                    type: float
                                    description: segment travel time accounting for time between flights
                                    example: 75.0
                                leg_details:
                                    type: object
                                    description: A list of legs, each leg includes origin, destination, flight number, departure time and arrival time
                                    properties:
                                        Origin:
                                            type: string
                                            description: IATA code of the leg origin
                                            example: LHR
                                        DepartureTime:
                                            type: string
                                            description: Departure time of the leg
                                            example: "2019-04-05T13:25:00.000+01:00"
                                        Destination:
                                            type: string
                                            description: IATA code of the leg destination
                                            example: CDG
                                        FlightNumber:
                                            type: string
                                            description: Leg's flight number
                                            example: 111
                                        DestinationName:
                                            type: string
                                            description: Full name of the leg destination
                                            example: "Paris, France (CDG)"
                                        BookingCode:
                                            type: string
                                            description: The airline booking code that describes the flight cabin class
                                            example: X
                                        cabin_class:
                                            type: string
                                            description: Leg’s cabin class *Travelport customers only*
                                            example: Economy
                                        Carrier:
                                            type: string
                                            description: Leg's carrier code
                                            example: BA
                                        Key:
                                            type: string
                                            description: Leg’s string identifier
                                            example: "oHzo6pBAAA/B1d6hPLAAAA=="
                                        ArrivalTime:
                                            type: string
                                            description: Arrival time of the leg
                                            example: "2019-04-05T15:40:00.000+02:00"
                                        OriginName:
                                            type: string
                                            description: Full name of the leg origin
                                            example: "London, United Kingdom (LHR)"
                                        FlightTime:
                                            type: integer
                                            description: Flight duration in minutes
                                            example: 75
                Group1:
                    type: object
                    description: One-way segment or first part of open-jaw segment
                    properties:
                        segment_origin_full:
                            type: string
                            description: "Origin of the segment."
                            example: "Paris, France"
                        segment_destination_full:
                            type: string
                            description: "Destination of the segment."
                            example: "Montreal, Canada"
                        key:
                            type: string
                            description: Segment_id for the group
                            example: "14c9e2e5c95a5bf0f9f7712de24348e6aba88c32"
                        segment_details:
                            type: object
                            description: Contains information about the segment legs, and total travel time
                            properties:
                                segment_time_w_connections:
                                    type: float
                                    description: segment travel time accounting for time between flights
                                    example: 1730.0
                                leg_details:
                                    type: object
                                    description: A list of legs, each leg includes origin, destination, flight number, departure time and arrival time
                                    properties:
                                        Origin:
                                            type: string
                                            description: IATA code of the leg origin
                                            example: CDG
                                        DepartureTime:
                                            type: string
                                            description: Departure time of the leg
                                            example: "2019-04-07T13:15:00.000+02:00"
                                        Destination:
                                            type: string
                                            description: IATA code of the leg destination
                                            example: YUL
                                        FlightNumber:
                                            type: string
                                            description: Leg's flight number
                                            example: 475
                                        DestinationName:
                                            type: string
                                            description: Full name of the leg destination
                                            example: "Montreal, PQ, Canada (YUL)"
                                        BookingCode:
                                            type: string
                                            description: The airline booking code that describes the flight cabin class
                                            example: X
                                        cabin_class:
                                            type: string
                                            description: Leg’s cabin class *Travelport customers only*
                                            example: Economy
                                        Carrier:
                                            type: string
                                            description: Leg's carrier code
                                            example: TS
                                        Key:
                                            type: string
                                            description: Leg’s string identifier
                                            example: "oHzo6pBAAA/B1d6hPLAAAA=="
                                        ArrivalTime:
                                            type: string
                                            description: Arrival time of the leg
                                            example: "2019-04-07T15:10:00.000-04:00"
                                        OriginName:
                                            type: string
                                            description: Full name of the leg origin
                                            example: "Paris, France (CDG)"
                                        FlightTime:
                                            type: integer
                                            description: Flight duration in minutes
                                            example: 475
    FareStructureRequest:
      title: Request
      type: object
      required:
          - flights
          - travellers
          - provider
          - pcc
          - currency
      properties:
          flights:
              description: "Array of flight legs input. A minimum of 3 legs (2
    destinations) is required. The final destination may be
    different than the initial starting point."
              required: true
              type: array
              items:
                type: object
                required:
                - id
                - from_city
                - start_type
                - to_city
                - end_type
                - departure_date
                properties:
                    id:
                        type: integer
                        description: "Flight leg ID"
                        example: 1
                    from_city:
                        type: string
                        description: "Start city/airport IATA code of leg."
                        example: "YHZ"
                    start_type:
                        type: string
                        description: "Upper-case letter “C” for city or “A” for airport"
                        example: C
                    to_city:
                        type: string
                        description: "End city/airport IATA code of leg."
                        example: "LON"
                    end_type:
                        type: string
                        description: "Upper-case letter “C” for city or “A” for airport"
                        example: C
                    departure_date:
                        type: string
                        description: "Departure date for this leg, format: YYYY-MM-DD. Any trailing characters after do not affect the API’s functionality."
                        example: "2018-06-20"
          travellers:
              description: "Can be integer or array.<br  />Integer = Number of adult travellers<br  />Array = [‘ADT’,’MIL’,’CHD’ ‘INF’]"
              required: true
              type: string
              example: 1
          provider:
              description: Fare provider to use.<br  />“1V” - Apollo, “1G” - Galileo, “1P” - Worldspan, “1A” - Amadeus
              type: string
              example: 1V
          pcc:
              description: PCC/OfficeID to emulate transactions under. Must have emulation enabled for the relevant Service Bureau PCC used by Trip Ninja to conduct queries. Please contact Trip Ninja to get this set up.
              required: true
              type: string
              example: 2G3C
          max_cache:
              default: 24
              description: "Hours to retain data queried from provider to be cached for use in future requests. Higher values result in: 1) faster queries as more data is available for re-use, 2) lower look-to-book ratios from the GDS perspective which may lower costs, and 3) less accurate pricing data which may cause issues in AirPriceReq when ticketing. Minimum value is 0.04 hours, maximum value is 720 hours. Please discuss with your Trip Ninja Account Manager if you need access to caching outside these limits."
              required: false
              type: integer
          currency:
              description: Currency to be used for provider query requests in three digit code.
              example: USD
              required: true
              type: string
          cabin_class:
              default: E
              description: Parameter toggles the permitted cabin class for your query.
              example: B
              required: false
              type: string
          time_value:
              default: 0
              description: This parameter helps set the value of a passenger’s time, in terms of the currency selected. It is used to trade off flight prices versus flight durations. The parameter is in units of [currency]/hour. Flight durations are calculated as the difference in minutes from the arrival time of the last flight in a leg to the departure time of the first flight in the leg. True Cost of Flight= [Flight Price] x [time_value/60]*[Flight Duration] The itinerary which provides the lowest True Cost of Flight is what is returned in the response. If you provide a time_value of 0 or do not provide the parameter, it will sort by price.
              required: false
              type: integer
          alliance:
              description: Parameter toggles the preferred alliance for your query. If there are results containing flights from the given alliance, only flights from that alliance will be returned. Otherwise it will return flights from any alliance. *Travelport Only*
              required: false
              type: string
              example: "*A"
          schema:
              default: 40
              description: Toggles which Travelport schema version to use. *Travelport Only*
              required: false
              type: integer
          exclude_carriers:
              description: Parameter toggles a list of a carriers to exclude from the query results. This option can not be applied together with the alliance option. They are mutually exclusive.
              required: false
              type: array
              example: []
              items:
                  type: string
          permitted_carrier:
              description: Toggles permitted carriers in GDS request *Travelport Only*
              required: false
              type: string
              example: AC
          no_overnight_layovers:
              description: Toggles whether to return results with no overnight layovers *Travelport Only*
              type: boolean
              default: false
          stops:
              description: Toggles number of stop for GDS request *Travelport Only*
              default: "Any"
              type: string
          baggage:
              description: Toggles minimum number of bags included with flights for GDS request *Travelport Only*
              default: "Any"
              type: string
          refundable:
              description: Parameter toggles query to only return fully refundable flights. *Travelport Only*
              default: false
              type: boolean
          region:
              description: Parameter toggles which travelport endpoint you hit *Travelport Only*
              default: "americas"
              type: string
          num_results:
              description: Parameter sets the number of segments in the response *Travelport Only*
              default: 50
              type: integer
          include_lcc:
              description: Enable a hybrid search of both GDS and low cost carrier content. This requires prior setup with Trip Ninja and an agreement with an LCC provider.
              default: false
              type: boolean
          include_itineraries:
              description: Enables itineraries to be constructed and returned from segments found for the requested trip.
              default: false
              type: boolean

    FlexTripRequest:
        title: Request
        type: object
        properties:
            departure_city:
                type: string
                description: Departure city/airport IATA code.
                example: YHZ
            departure_city_type:
                type: string
                description: Upper-case letter “C” for city or “A” for airport
                example: C
            end_city:
                type: string
                description: Used to return to a different city than the departure_city, if none specified will default to always returning to the departure_city.
                example: LON
            end_city_type:
                type: string
                description: Upper-case letter “C” for city or “A” for airport
                example: C
            departure_date:
                type: string
                description: "Departure date for trip<br  />Format: YYYY-MM-DD. Any trailing characters after do not affect the API’s functionality."
                example: "2018-06-20"
            travellers:
                type: integer
                description: "Integer = Number of adult travellers<br  />Array = [‘ADT’,’MIL’,’CHD’ ‘INF’]"
                example: 1
            cities:
                type: array
                description: List of elements containing the destination cities, nights, and locked status. Up to 7 destination cities can be listed.
                items:
                    type: object
                    properties:
                        city:
                            type: string
                            description: Destination city/airport IATA code.
                            example: YHZ
                        city_type:
                            type: string
                            description: Upper-case letter “C” for city or “A” for airport
                            example: C
                        nights:
                            type: integer
                            description: "Number of nights to spend in destination. The nights start counting from the arrival date to the destination, not the departure date of the previous flight.<br  />
                            Example:<br  />
                            Depart New York 2017-10-02 arrive London 2017-10-03, to stay 3 nights. Departure from London is 2017-10-06, not 2017-10-05."
            provider:
                description: Fare provider to use.<br  />“1V” - Apollo, “1G” - Galileo, “1P” - Worldspan, “1A” - Amadeus
                type: string
                example: 1V
            PCC:
                description: PCC/OfficeID to emulate transactions under. Must have emulation enabled for the relevant Service Bureau PCC used by Trip Ninja to conduct queries. Please contact Trip Ninja to get this set up.
                required: true
                type: string
                example: 2G3C
            max_cache:
                default: 24
                description: "Hours to retain data queried from provider to be cached for use in future requests. Higher values result in: 1) faster queries as more data is available for re-use, 2) lower look-to-book ratios from the GDS perspective which may lower costs, and 3) less accurate pricing data which may cause issues in AirPriceReq when ticketing. Minimum value is 0.04 hours, maximum value is 720 hours. Please discuss with your Trip Ninja Account Manager if you need access to caching outside these limits."
                required: false
                type: integer
            currency:
                description: Currency to be used for provider query requests in three digit code.
                example: USD
                required: true
                type: string
            time_value:
                default: 0
                description: This parameter helps set the value of a passenger’s time, in terms of the currency selected. It is used to trade off flight prices versus flight durations. The parameter is in units of [currency]/hour. Flight durations are calculated as the difference in minutes from the arrival time of the last flight in a leg to the departure time of the first flight in the leg. True Cost of Flight= [Flight Price] x [time_value/60]*[Flight Duration] The itinerary which provides the lowest True Cost of Flight is what is returned in the response. If you provide a time_value of 0 or do not provide the parameter, it will sort by price.
                required: false
                type: integer
            one_way:
                default: false
                description: Parameter toggles whether you want to query only one-way flights (default is false)
                type: boolean
            cabin_class:
                default: E
                description: Parameter toggles the permitted cabin class for your query.
                example: B
                required: false
                type: string
            alliance:
                description: Parameter toggles the preferred alliance for your query. If there are results containing flights from the given alliance, only flights from that alliance will be returned. Otherwise it will return flights from any alliance. *Travelport Only*
                required: false
                type: string
                example: "*A"
            schema:
                default: 40
                description: Toggles which Travelport schema version to use. *Travelport Only*
                required: false
                type: integer
            exclude_carriers:
                description: Parameter toggles a list of a carriers to exclude from the query results. This option can not be applied together with the alliance option. They are mutually exclusive.
                required: false
                type: array
                example: []
                items:
                    type: string
            permitted_carrier:
                description: Toggles permitted carriers in GDS request *Travelport Only*
                required: false
                type: string
                example: AC
            no_overnight_layovers:
                description: Toggles whether to return results with no overnight layovers *Travelport Only*
                type: boolean
                default: false
            stops:
                description: Toggles number of stop for GDS request *Travelport Only*
                default: "Any"
                type: string
            baggage:
                description: Toggles minimum number of bags included with flights for GDS request *Travelport Only*
                default: "Any"
                type: string
            refundable:
                description: Parameter toggles query to only return fully refundable flights. *Travelport Only*
                default: false
                type: boolean
            region:
                description: Parameter toggles which travelport endpoint you hit *Travelport Only*
                default: "americas"
                type: string
            num_results:
                description: Parameter sets the number of segments in the response *Travelport Only*
                default: 50
                type: integer
    FlexTripResponse:
      title: Response
      type: object
      properties:
        trip:
          type: object
          description: time of sunrise
          example:
            endpoint: Prod
            num_results: 50
            cabin_class: E
            exclude_carriers: []
            region: "americas"
            refundable: false
            currency: USD
            time_value: 0
            max_cache: 24
            travellers: 1
            provider: 1V
            alliance: ""
            alpha: 0.1
            schema: 40
            pcc: 2G3C
        FlexTrip:
            type: object
            description: Contains the JSON object of the response. May contain both FlexTrip and FareStructure if hitting the hybrid endpoint, otherwise will contain only either FareStructure or FlexTrip JSON object.
            properties:
                total_cost:
                    type: float
                    description: Total cost of cheapest segments recommended, in currency specified.
                    example: 693.6
                tn_net_fare_markup:
                    type: float
                    description: Markup specified by the Trip Ninja Net Fare to be applied at the itinerary level.
                    example: 0.0
                structure:
                    type: array
                    description: "Array representing the structure of the trip in terms of one-ways and open-jaw segments. For example: [[0, 1], [3, 4], 2] means there would be three segments. One openjaw with key “01”, one with key “34” and a one-way with key ‘2”."
                ErrorDetails:
                    type: string
                    description: Usually an empty string, but will contain a helpful message if something goes wrong!
                path_sequence:
                    type: array
                    description: An array of IATA codes representing the chronological order of your trip.
                trip_id:
                    type: string
                    description: A unique key used for identification and when booking a trip.
                total_transportation_minutes:
                    type: integer
                    description: Total transportation minutes for recommended cheapest segments.
                segments:
                    $ref: '#/components/schemas/Segments'

    ReportRequest:
        title: Request
        type: object
        properties:
            trip_id:
                type: string
                description: Trip ID returned in search response
                example: "6be6e72c60102bd489ac46434d4ac6c11e047ee8"
            segment_ids:
                type: array
                description: Array of segment_id’s for the booked segments - These will be strings for one-ways and arrays of strings for open-jaws.
                items:
                    type: string
                    example: [ "18fd1992fd90e6e2cf44d49308a1482b2ecd7f67", "59e15240be759a023c950e66379dca775fd8aaf1"]


    CancelRequest:
        title: Request
        type: object
        properties:
            trip_id:
                type: string
                description: Trip ID returned in search response
                example: "6be6e72c60102bd489ac46434d4ac6c11e047ee8"


externalDocs:
    description: Main Site
    url: https://www.tripninja.io/
