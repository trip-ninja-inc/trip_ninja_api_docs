openapi: "3.0.0"

info:
  version: 2.0.0
  title: Trip Ninja API Documentation
  description: |
    <h2>Introduction</h2>
    Trip Ninja uses a REST API with requests and responses in JSON format. For development and testing, the pre-production servers
    are to be used. Once ready for live use, access to the production servers will be provided. <br  />
    <h2>Trip Ninja API URLs</h2>

    Pre-Production: https://preprodapi.tripninja.io

    For security, Trip Ninja’s servers are only accessible from whitelisted IPs. Please contact your account manager to whitelist IPs you
    will be using.

    Before you start ensure that:<br  />
        - IP addresses have been provided to be whitelisted for our servers.<br  />
        - API username and password have been provided by Trip Ninja.<br  />

    <h2>Workflow</h2>
    The following diagram shows the typical data flow of API calls to Trip Ninja for a typical OTA integration.

    ![Workflow diagram](https://s3.amazonaws.com/tn-api-docs/ota_flowchart.png)

    <h2>Authentication</h2>
    Trip Ninja uses Basic Authentication standards. Simply encode your username and password string using base64 and pass it in the
    authorization headers. See the python example below on how this is done. In the example, the payload and API endpoint url are not
    shown.

    Python Example:

    <pre>
    import base64
    auth = base64.b64encode("USERNAME:PASSWORD")
    headers = {
        'authorization': "Basic "+ auth,
    }
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    </pre>

    # Error Codes
    <table>
      <tr><td>IE01</td><td>Need minimum 2 destinations</td></tr>
      <tr><td>IE02</td><td>Duplicate city in list</td></tr>
      <tr><td>IE09</td><td>Can't run any queries for flight dates in the past</td></tr>
      <tr><td>IE10</td><td>Incorrect city_type, expected one of ['C', 'A']</td></tr>
      <tr><td>IE19</td><td>Incorrect region, expected one of 'emea', 'apac', 'americas'</td></tr>
      <tr><td>IE21</td><td>Wrong currency</td></tr>
      <tr><td>IE22</td><td>Not a valid cabin option. expected one of 'E' , 'PE', 'SE', 'BC','FC', 'PFC'</td></tr>
      <tr><td>IE23</td><td>Not a valid alliance. Expected one of *A, *S, *O</td></tr>
      <tr><td>IE24</td><td>Travellers Type does not meet expected criteria. Should be a list having between 0 and 10 values</td></tr>
      <tr><td>IE27</td><td>Num_results should be an integer between 50 and 1000</td></tr>
      <tr><td>IE29</td><td>Invalid Traveller type</td></tr>
      <tr><td>IE30</td><td>Incorrect value for single_pnr, must be boolean</td></tr>
    <table>

  x-logo:
    url: 'https://s3.amazonaws.com/tn-api-docs/trip_ninja_logo.png'
    altText: Trip Ninja logo
    href: 'https://www.tripninja.io/'

servers:
  - url: https://preprodapi.tripninja.io
    description: Pre-Production server for development and testing

paths:
    /get-searches/:
        post:
            summary: "Get Searches"
            description: |
              This endpoint carries out FareStructure and if applicable Virtual Interlining logic to determine the datasource
              searches required. The response contains a list of searches to be done by the OTA, which are then passed in the next
              endpoint (generate-solutions) to get the results.

            operationId: GetSearchesRequest
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetSearchesRequest'

            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetSearchesResponse'
                400:
                    description: Invalid Input
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: sting
                                        description: Error code and 0 for success response
                                        example: IE23
                                    message:
                                        type: string
                                        description: Contains the error message
                                        example: Not a valid alliance. Expected one of *A, *S, *O
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: sting
                                        description: Error code and 0 for success response
                                        example: IE44
                                    message:
                                        type: string
                                        description: Contains the error message
                                        example: "User is not authorized"
                500:
                    description: Server Error


    /generate-solutions/:
      post:
        summary: "Generate Solutions"
        description: This is called after get-searches and the datasource requests have been carried out OTA-side. This call takes those results and generates itineraries based on the results and the original request.
        operationId: PriceConfirm
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateSolutionsRequest'



components:
  schemas:

    GetSearchesRequest:
      title: Request
      type: object
      required:
        - flights
        - travellers
        - currency
        - country_code
      properties:
        flights:
          description: "Array of flight legs input."
          required: true
          type: array
          items:
            type: object
            required:
              - id
              - from_city
              - start_type
              - to_city
              - end_type
              - departure_date
            properties:
              id:
                type: integer
                description: "Flight leg ID, must be unique and in order from 1 to n."
                example: 1
              from_city:
                type: string
                description: "Start city/airport IATA code of leg."
                example: "YHZ"
              start_type:
                type: string
                description: "Upper-case letter “C” for city or “A” for airport. Doing a city search may return multiple airports nearby."
                example: C
              to_city:
                type: string
                description: "End city/airport IATA code of leg."
                example: "LON"
              end_type:
                type: string
                description: "Upper-case letter “C” for city or “A” for airport. Doing a city search may return multiple airports nearby."
                example: C
              departure_date:
                type: string
                description: "Departure date for this leg, format: YYYY-MM-DD. Any trailing characters after do not affect the API’s functionality."
                example: "2019-06-20"
              cabin_class:
                type: string
                description: "A unique cabin class can be set for each segment of the trip, otherwise it can be set at the root level."
                example: BC
                enum: [ "E", "PE", "BC", "FC", "PFC"]
                required: false
        travellers:
          description: "Array of passenger types, values include ‘ADT’, ’MIL’, ’CHD’ and ‘INF’"
          required: true
          type: array
          example: [ 'ADT','ADT','CHD' ]
        currency:
          description: Currency to be used for provider query requests in three digit code and any price computation.
          example: USD
          required: true
          type: string
        source:
          description: "Segment to be used for markup models - typically by source (ex: onsite, skyscanner, kayak, mobile, etc). Ensure this is known by your Trip Ninja account manager so the markup models for that source can be created."
          example: skyscanner
          type: string
          required: true
        country_code:
          description: "Country code where search came from (For example: CA, US). This works with the source field to determine the markup model to use."
          example: CA
          type: string
          required: true
        cabin_class:
          default: E
          description: "Parameter toggles the permitted cabin class for your query. Alternatively, it can be set for each segment."
          example: E
          required: false
          enum: [ "E", "PE", "BC", "FC", "PFC"]
          type: string
        time_value:
          default: 0
          description: |
            This parameter helps set the value of a passenger’s time, in
            terms of the currency selected. It is used to trade off flight
            prices versus flight durations. The parameter is in units of
            [currency]/hour. Flight durations are calculated as the difference
            in minutes from the arrival time of the last flight in a leg to
            the departure time of the first flight in the leg.
            
            True Cost of Flight = [Flight Price] * [time_value/60] * [Flight Duration]
            
            The itinerary which provides the lowest True Cost of Flight is
            what is returned in the response. If you provide a time_value
            of 0 or do not provide the parameter, it will sort by price.
          required: false
          type: integer
        num_results:
          description: Parameter sets the number of segments in the response. If single_pnr = true, this parameter refers to the number of constructed itineraries in the response. All single_pnr itineraries are passed through if that parameter is set to true.
          default: 50
          type: integer
          minimum: 50
          maximum: 5000
        single_pnr:
          description: Return single-pnr structures in addition to the results returned. If set to true, all single_pnr itineraries will be passed through, regardless of the num_results parameter.
          default: false
          type: boolean
        virtual_interlining:
          description: Add virtual interlining to the search so that the results are a mix of standard search results and virtual interlining results.
          default: false
          type: boolean


    GetSearchesResponse:
        type: object
        properties:
            trip_id:
              description: The trip id of the search. This will be used in all future requests relating to this search.
              type: string
            datasource_requests:
              description: The list of datasource requests to be carried out by the OTA.
              type: array
              items:
                  $ref: '#/components/schemas/DatasourceRequest'

    DatasourceRequest:
        type: object
        properties:
            datasource_request_id:
              description: The id of the datasource request.
              type: string
            num_results:
              description: The number of results requested.
              type: integer
            datasource_segment:
              description: The list of datasource segments.
              type: array
              items:
                  $ref: '#/components/schemas/DatasourceSegment'

    DatasourceSegment:
        type: object
        properties:
            id:
              description: The id of the datasource segment. While most will be in sequence and an integer [1...n], some may include a 1.1 or 1.2 when these are part of a virtual interlining segment to be searched.
              type: float
            from_iata:
              description: The IATA code of the origin airport or city.
              type: string
            from_type:
              description: The type of the origin, "C" for City or "A" for Airport.
              type: string
              enum: ["C", "A"]
            to_iata:
              description: The IATA code of the destination airport or city.
              type: string
            to_type:
              description: The type of the destination, "C" for City or "A" for Airport.
              type: string
              enum: ["C", "A"]
            departure_date:
              description: The departure date of the segment, format = YYYY-MM-DD.
              type: string
            cabin_class:
              description: The cabin class of the segment.
              type: string
              enum: [ "E", "PE", "BC", "FC", "PFC"]


    GenerateSolutionsRequest:
        type: object
        properties:
            trip_id:
              description: The trip id of the search. This will be used in all future requests relating to this search.
              type: string
            datasource_responses:
              description: The list of datasource responses to be used to generate solutions.
              type: array
              items:
                  $ref: '#/components/schemas/DatasourceResponse'
                  
    DatasourceResponse:
      type: object
      properties:
        datasource_request_id:
          description: The id of the datasource request.
          type: string
        datasource_solutions:
          description: The list of datasource solutions.
          type: array
          items:
            $ref: '#/components/schemas/DatasourceSolution'
        datasource_segment_details:
          description: The list of datasource segments details.
          type: array
          items:
            $ref: '#/components/schemas/DatasourceSegmentDetails'

                  
    DatasourceSolution:
      type: object
      properties:
        price:
          type: float
          description: Price of the segment (fare and tax included).
          example: 197.1
        base_price:
          type: float
          description: Base price of the segment (tax excluded)
          example: 0
        taxes:
          type: float
          description: Tax price of the segment
          example: 119.1
        fees:
          type: float
          description: Fees for the segment, if applicable.
          example: 0
        latest_ticketing_date:
          type: date
          description: Latest ticketing time
          example: "2019-05-07"
        refundable:
          type: boolean
          description: Refundable tickets
          example: false
        e_ticketability:
          type: boolean
          example: true
        transp_time:
          type: integer
          description: Total transportation time for the itinerary
          example: 425
        segments:
          type: array
          description: List of segments in the itinerary
          items:
            segment_id:
              type: string
              description: This is the same as the segment_id in the segment_details response.
              example: "40495f0f293b54ffe64c833d987cd80ecdb5aca5"
            segment_source:
              type: string
              description: Segment source
              example: "1G"
            price:
              type: float
              description: Price of the segment (fare and tax included).
              example: 197.1


    DatasourceSegmentDetails:
      type: object
      properties:
        segment_id:
          type: string
          description: Segment ID, ties to the segment IDs in the datasource_solutions. Example = "40495f0f293b54ffe64c833d987cd80ecdb5aca5"
        segment_source:
          type: string
          description: Segment source, ties to the segment source in the datasource_solutions. Example = "1G"
        legs:
          type: array
          items:
            $ref: '#/components/schemas/DatasourceLegDetails'
        segment_origin_full:
          type: string
          description: Full name of the origin airport. Example = "Halifax, NS, Canada (YHZ)"
        segment_destination_full:
          type: string
          description: Full name of the destination airport. Example = "Vancouver, BC, Canada (YVR)"
        fare_basis_code:
          type: string
          description: Fare basis code. Example = "LCVF4LBK"
        private_fare:
          type: boolean
        private_type:
          type: string
        fare_info_ref:
          type: string
        fare_rule_key:
          type: string
        baggage:
          type: object
          properties:
              number_of_pieces:
                type: integer
#        brands:
#          type: array #TODO: add brands schema
#          items:
#            $ref: '#/components/schemas/DatasourceBrandDetails'
        price_breakdown_with_passenger_type_code:
          type: array
          items:
            $ref: '#/components/schemas/DatasourcePriceBreakdownDetails'
        plating_carrier:
          type: string
          description: Plating carrier. Example = "WS"
#        intermediate_stops:
#          type: array #TODO: Add intermediate stop details
#          items:
#            $ref: '#/components/schemas/DatasourceIntermediateStopDetails'
        price:
          type: number
        cancel_penalty:
          type: object
          properties:
              amount:
                type: number
              percentage:
                type: number
        change_penalty:
          type: object
          properties:
              amount:
                type: number
              percentage:
                type: number


    DatasourceLegDetails:
      type: object
      properties:
          OriginName:
            type: string
            description: Full name of the origin airport. Example = "Halifax, NS, Canada (YHZ)"
          Origin:
            type: string
            description: Origin airport code. Example = "YHZ"
          DestinationName:
            type: string
            description: Full name of the destination airport. Example = "Vancouver, BC, Canada (YVR)"
          Destination:
            type: string
            description: Destination airport code. Example = "YVR"
          DepartureTime:
            type: string
            description: Departure time. Example = "2023-03-15T08:00:00"
          ArrivalTime:
            type: string
            description: Arrival time. Example = "2023-03-15T10:29:00"
          FlightNumber:
            type: string
            description: Flight number. Example = "391"
          Carrier:
            type: string
            description: Carrier code. Example = "WS"
          CarrierFullName:
            type: string
            description: Carrier full name. Example = "Westjet"
          FlightTime:
            type: integer
            description: Flight time in minutes. Example = 329
          AircraftType:
            type: string
            description: Aircraft type. Example = "73H"
          Key:
            type: string
            description: Leg key. Example = "DDN3UXYAuDKAaiphxoAAAA=="
          BookingCode:
            type: string
            description: Booking code. Example = "E"
          cabin_class:
            type: string #TODO: standardize this into ["E", "PE", "BC", "FC", "PFC"] as in other cabin_class sections
            description: Cabin class. Example = "Economy"
          fare_info_ref:
            type: string
            description: Fare info reference. Example = "DDN3UXYAuDKAkiphxoAAAA=="
          fare_rule_key:
            type: string
            description: Fare rule key. Example = "gws-eJxNj8EOAiEMRD+GzL1ASdwbuKsxWcJBzRo8+P+f4VA17pQ2baa8QM45SIgS5JD3cni5xw1zWYCGwOzbFT6JCDynBhltnbez1uMKg0SfzPqHR7dFrtph6Yw29K398qTxIT


    DatasourcePriceBreakdownDetails:
      type: object
      properties:
        passenger_type_code:
          type: string
          description: Passenger type code. Example = "ADT"
        base_price:
          type: number
        total_price:
          type: number
        taxes:
          type: number
        tax_breakdown:
          type: array
          items:
            $ref: '#/components/schemas/DatasourceTaxBreakdownDetails'

    DatasourceTaxBreakdownDetails:
      type: object
      properties:
          category:
            type: string
            description: Tax category. Example = "CA"
          amount:
            type: number
            description: Tax amount. Example = 5.295
