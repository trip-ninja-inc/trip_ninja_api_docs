{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Trip Ninja API Documentation",
    "description": "<h2>Get Searches</h2>\nThe <code>/get-searches/</code> endpoint is responsible for taking a traveller search request from your platform and applying our FareStructure logic to determine the optimal queries predicted.\n\n<b>The general flow is as follows:</b>\nA traveller makes a search request on your platform for an itinerary and you send this request from your platform to Trip Ninja using the                               endpoint.\nTrip Ninja reviews this search request, builds a set of optimal content search queries for you to send to your content provider(s), and returns this set of content search queries to you.\n\n![Workflow diagram](https://s3.amazonaws.com/tn-api-docs/core-get-searches-flow.png)\n"
  },
  "paths": {
    "/get-searches/": {
      "post": {
        "summary": "Get Searches",
        "description": "This endpoint carries out FareStructure and if applicable Virtual Interlining logic to determine the optimal searches predicted to provide the best flight search results. The response contains a list of searches to be done by the OTA, which are then passed in the next\nendpoint (generate-solutions) to get the results.\n",
        "operationId": "GetSearchesRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSearchesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSearchesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error code and 0 for success response",
                      "example": "IE23"
                    },
                    "message": {
                      "type": "string",
                      "description": "Contains the error message",
                      "example": "Not a valid search"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error code and 0 for success response",
                      "example": "IE44"
                    },
                    "message": {
                      "type": "string",
                      "description": "Contains the error message",
                      "example": "User is not authorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GetSearchesRequest": {
        "title": "Request",
        "type": "object",
        "required": [
          "flights",
          "travellers",
          "currency",
          "country_code"
        ],
        "properties": {
          "flights": {
            "description": "Array of flight legs input.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "from_city",
                "start_type",
                "to_city",
                "end_type",
                "departure_date"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Flight leg ID, must be unique and in order from 1 to n.",
                  "example": 1
                },
                "from_city": {
                  "type": "string",
                  "description": "Start city/airport IATA code of leg.",
                  "example": "YHZ"
                },
                "start_type": {
                  "type": "string",
                  "description": "Upper-case letter “C” for city or “A” for airport. Doing a city search may return multiple airports nearby.",
                  "example": "C"
                },
                "to_city": {
                  "type": "string",
                  "description": "End city/airport IATA code of leg.",
                  "example": "LON"
                },
                "end_type": {
                  "type": "string",
                  "description": "Upper-case letter “C” for city or “A” for airport. Doing a city search may return multiple airports nearby.",
                  "example": "C"
                },
                "departure_date": {
                  "type": "string",
                  "description": "Departure date for this leg, format: YYYY-MM-DD. Any trailing characters after do not affect the API’s functionality.",
                  "example": "2023-06-20"
                },
                "cabin_class": {
                  "type": "string",
                  "description": "A unique cabin class can be set for each segment of the trip, otherwise it can be set at the root level.",
                  "example": "BC",
                  "enum": [
                    "E",
                    "PE",
                    "BC",
                    "FC",
                    "PFC"
                  ]
                }
              }
            }
          },
          "travellers": {
            "description": "Array of passenger types, values include ‘ADT’, ’MIL’, ’CHD’ and ‘INF’",
            "type": "array",
            "example": [
              "ADT",
              "ADT",
              "CHD"
            ]
          },
          "currency": {
            "description": "Currency to be used for provider query requests in three digit code and any price computation.",
            "example": "USD",
            "type": "string"
          },
          "source": {
            "description": "Segment to be used for markup models - typically by source (ex: onsite, skyscanner, kayak, mobile, etc). Ensure this is known by your Trip Ninja account manager so the markup models for that source can be created.",
            "example": "skyscanner",
            "type": "string"
          },
          "country_code": {
            "description": "Country code where search came from (For example: CA, US). This works with the source field to determine the markup model to use.",
            "example": "CA",
            "type": "string"
          },
          "cabin_class": {
            "default": "E",
            "description": "Parameter toggles the permitted cabin class for your query. Alternatively, it can be set for each segment.",
            "example": "E",
            "enum": [
              "E",
              "PE",
              "BC",
              "FC",
              "PFC"
            ],
            "type": "string"
          },
          "time_value": {
            "default": 0,
            "description": "This parameter helps set the value of a passenger’s time, in\nterms of the currency selected. It is used to trade off flight\nprices versus flight durations. The parameter is in units of\n[currency]/hour. Flight durations are calculated as the difference\nin minutes from the arrival time of the last flight in a leg to\nthe departure time of the first flight in the leg.\n\nTrue Cost of Flight = [Flight Price] * [time_value/60] * [Flight Duration]\n\nThe itinerary which provides the lowest True Cost of Flight is\nwhat is returned in the response. If you provide a time_value\nof 0 or do not provide the parameter, it will sort by price.\n",
            "type": "integer"
          },
          "num_results": {
            "description": "Parameter sets the number of segments in the response. If single_pnr = true, this parameter refers to the number of constructed itineraries in the response. All single_pnr itineraries are passed through if that parameter is set to true.",
            "default": 50,
            "type": "integer",
            "minimum": 50,
            "maximum": 5000
          },
          "single_pnr": {
            "description": "Return single-pnr structures in addition to the results returned. If set to true, all single_pnr itineraries will be passed through, regardless of the num_results parameter.",
            "default": false,
            "type": "boolean"
          },
          "virtual_interlining": {
            "description": "Add virtual interlining to the search so that the results are a mix of standard search results and virtual interlining results.",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "GetSearchesResponse": {
        "type": "object",
        "properties": {
          "trip_id": {
            "description": "The trip id of the search. This will be used in all future requests relating to this search.",
            "type": "string",
            "example": "fb3d8eff432a329dc21fad8449c686fa93e5ce24"
          },
          "datasource_requests": {
            "description": "The list of datasource requests to be carried out by the OTA.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasourceRequest"
            }
          }
        }
      },
      "DatasourceRequest": {
        "properties": {
          "datasource_request_id": {
            "description": "The id of the datasource request.",
            "type": "string",
            "example": "4f499298b303c55a1ee522118afce28abe2f68e4"
          },
          "num_results": {
            "description": "The number of results requested.",
            "type": "integer",
            "example": 50
          },
          "datasource_segment": {
            "description": "The list of datasource segments.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasourceSegment"
            }
          }
        }
      },
      "DatasourceSegment": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the datasource segment. While most will be in sequence and an integer [1...n], some may include a 1.1 or 1.2 when these are part of a virtual interlining segment to be searched.",
            "type": "number",
            "example": 1
          },
          "from_iata": {
            "description": "The IATA code of the origin airport or city.",
            "type": "string",
            "example": "YHZ"
          },
          "from_type": {
            "description": "The type of the origin, \"C\" for City or \"A\" for Airport.",
            "type": "string",
            "enum": [
              "C",
              "A"
            ],
            "example": "C"
          },
          "to_iata": {
            "description": "The IATA code of the destination airport or city.",
            "type": "string",
            "example": "YVR"
          },
          "to_type": {
            "description": "The type of the destination, \"C\" for City or \"A\" for Airport.",
            "type": "string",
            "enum": [
              "C",
              "A"
            ],
            "example": "C"
          },
          "departure_date": {
            "description": "The departure date of the segment, format = YYYY-MM-DD.",
            "type": "string",
            "example": "2023-06-30"
          },
          "cabin_class": {
            "description": "The cabin class of the segment.",
            "type": "string",
            "enum": [
              "E",
              "PE",
              "BC",
              "FC",
              "PFC"
            ],
            "example": "E"
          }
        }
      }
    }
  }
}